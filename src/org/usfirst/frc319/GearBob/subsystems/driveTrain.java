// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc319.GearBob.subsystems;

import org.usfirst.frc319.GearBob.Robot;
import org.usfirst.frc319.GearBob.RobotMap;
import org.usfirst.frc319.GearBob.commands.Drivetrain.JoystickDrive;
import org.usfirst.frc319.GearBob.commands.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * 
 */
public class driveTrain extends Subsystem {


    public final CANTalon leftLead = RobotMap.drivetrainleftLead;
    private final CANTalon left7 = RobotMap.drivetrainleft7;
    private final CANTalon left8 = RobotMap.drivetrainleft8;
    private final CANTalon left9 = RobotMap.drivetrainleft9;
    public final CANTalon rightLead = RobotMap.drivetrainrightLead;
    private final CANTalon right2 = RobotMap.drivetrainright2;
    private final CANTalon right3 = RobotMap.drivetrainright3;
    private final CANTalon right4 = RobotMap.drivetrainright4;
    
    private final RobotDrive joystickDrive = RobotMap.driveTrainJoystickDrive;
    
    private final PowerDistributionPanel pdp = RobotMap.pdp;
   
    public final int DRIVE_PROFILE = 0;
    
    StringBuilder _sb = new StringBuilder();
	int _loops = 0;
    
    public driveTrain(){
    	
    	leftLead.changeControlMode(TalonControlMode.PercentVbus);
    	left7.changeControlMode(TalonControlMode.Follower);
    	left7.set(leftLead.getDeviceID());
    	left8.changeControlMode(TalonControlMode.Follower);
    	left8.set(leftLead.getDeviceID());
    	left9.changeControlMode(TalonControlMode.Follower);
    	left9.set(leftLead.getDeviceID());
    	leftLead.reverseSensor(true);
    	leftLead.reverseOutput(true);
    	leftLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	//leftLead.configEncoderCodesPerRev(1024);
    	
    	rightLead.changeControlMode(TalonControlMode.PercentVbus);
    	right2.changeControlMode(TalonControlMode.Follower);
    	right2.set(rightLead.getDeviceID());
    	right3.changeControlMode(TalonControlMode.Follower);
    	right3.set(rightLead.getDeviceID());
    	right4.changeControlMode(TalonControlMode.Follower);
    	right4.set(rightLead.getDeviceID());
    	rightLead.reverseOutput(false);
    	rightLead.reverseOutput(false);
    	rightLead.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	rightLead.configEncoderCodesPerRev(1024);
    	
    	leftLead.configNominalOutputVoltage(+12.0, -12.0);
    	leftLead.configPeakOutputVoltage(+12.0, -12.0);
    	leftLead.EnableCurrentLimit(false);
    	leftLead.setCurrentLimit(1);

    	rightLead.configNominalOutputVoltage(+12.0, -12.0);
    	rightLead.configPeakOutputVoltage(+12.0, -12.0);
    	rightLead.EnableCurrentLimit(false);
    	rightLead.setCurrentLimit(1);

    	rightLead.setVoltageRampRate(24);
    	leftLead.setVoltageRampRate(24);
    	
    	
    	double closedLoopRampRate = 0.00;
    	
    	double pDrive = 0.1;
        double fGain = .224; // Drivetrain /.036
        double dDrive = 0.00;// .3 is good
         
    	
    	rightLead.setPID(pDrive, 0, dDrive, fGain, 0, closedLoopRampRate, DRIVE_PROFILE);
    	leftLead.setPID(pDrive, 0, dDrive, fGain, 0, closedLoopRampRate, DRIVE_PROFILE);
    	
    //	rightLead.EnableCurrentLimit(true);//Enables current limit...
    //	rightLead.setCurrentLimit(50);//do not exceed this amount of current...need to figure out actual number/this was a guess (in amps) Joshua 6/3/17
    	
    //	leftLead.EnableCurrentLimit(true);
    //	leftLead.setCurrentLimit(50);
    }

   

    
 
	public void initDefaultCommand() {

		// setDefaultCommand(new LeftDrivetrainPIDTest());
		setDefaultCommand(new JoystickDrive());
	}

	public void joystickDrive(double moveValue, double rotateValue) {

		joystickDrive.arcadeDrive(moveValue, rotateValue, true);
	}
	
	//get the output current for the given talon.  if the voltage is negative, make the current negative
	public double getTalonDirectionalCurrent(CANTalon talon){
		double voltage = talon.getOutputVoltage();
		if (voltage >= 0){
			return talon.getOutputCurrent();
		}
		else{
			return -talon.getOutputCurrent();
		}
	}
	
	public double getTalonVoltage(CANTalon talon){
		return talon.getOutputVoltage();
	}
	
	public CANTalon getLeftLeadTalon(){
		return this.leftLead;
	}
	
	public CANTalon getLeft1Talon(){
		return this.left7;
	}
	
	public CANTalon getLeft2Talon(){
		return this.left8;
	}
	
	public CANTalon getLeft3Talon(){
		return this.left9;
	}
	
	public CANTalon getRightLeadTalon(){
		return this.rightLead;
	}
	
	public CANTalon getRight1Talon(){
		return this.right2;
	}
	
	public CANTalon getRight2Talon(){
		return this.right3;
	}
	
	public CANTalon getRight3Talon(){
		return this.right4;
	}

	
	public double getLeftLeadCurrent() {
		return Robot.driveTrain.leftLead.getOutputCurrent();
	}

	public double getLeft1Current() {
		return Robot.driveTrain.left7.getOutputCurrent();
	}

	public double getLeft2Current() {
		return Robot.driveTrain.left8.getOutputCurrent();
	}

	public double getLeft3Current() {
		return Robot.driveTrain.left9.getOutputCurrent();
	}

	public double getRightLeadCurrent() {
		return Robot.driveTrain.rightLead.getOutputCurrent();
	}

	public double getRight5Current() {
		return Robot.driveTrain.right2.getOutputCurrent();
	}

	public double getRight6Current() {
		return Robot.driveTrain.right3.getOutputCurrent();
	}

	public double getRight7Current() {
		return Robot.driveTrain.right4.getOutputCurrent();
	}
	

	public double getLeftLeadVoltage() {
		return Robot.driveTrain.leftLead.getOutputVoltage();
	}

	public double getLeft1Voltage() {
		return Robot.driveTrain.left7.getOutputVoltage();
	}

	public double getLeft2Voltage() {
		return Robot.driveTrain.left8.getOutputVoltage();
	}

	public double getLeft3Voltage() {
		return Robot.driveTrain.left9.getOutputVoltage();
	}

	public double getRightLeadVoltage() {
		return Robot.driveTrain.rightLead.getOutputVoltage();
	}

	public double getRight5Voltage() {
		return Robot.driveTrain.right2.getOutputVoltage();
	}

	public double getRight6Voltage() {
		return Robot.driveTrain.right3.getOutputVoltage();
	}

	public double getRight7Voltage() {
		return Robot.driveTrain.right4.getOutputVoltage();
	}

	public double getpdp0Current() {
		return pdp.getCurrent(0);
	}

	public double getpdp1Current() {
		return pdp.getCurrent(1);
	}

	public double getpdp2Current() {
		return pdp.getCurrent(2);
	}

	public double getpdp3Current() {
		return pdp.getCurrent(3);
	}

	public double getpdp11Current() {
		return pdp.getCurrent(11);
	}

	public double getpdp12Current() {
		return pdp.getCurrent(12);
	}

	public double getpdp13Current() {
		return pdp.getCurrent(13);
	}

	public double getpdp14Current() {
		return pdp.getCurrent(14);
	}

	public double getRightDriveVelocity() {
		return rightLead.getSpeed();
	}

	public double getLeftDriveVelocity() {
		return leftLead.getSpeed();
	}

	public void driveStraight(double speed) {
		Robot.driveTrain.joystickDrive(speed, 0.0);
	}

	public double getRightDistance() {
		return rightLead.getPosition();
	}

	public boolean reachedDistance(double distance) {
		if (rightLead.getPosition() >= distance) {
			return true;
		} else {
			return false;
		}
	}

	public double getRightDrivePosition() {
		return Robot.driveTrain.rightLead.getPosition();
	}

	public void rightDrivetrainPIDTestMode() {
		// SmartDashboard.putInt("motorspeed", rightDriveLead.getEncVelocity());

		/* get gamepad axis */
		double leftYstick = Robot.oi.driverController.getRawAxis(1);
		double motorOutput = rightLead.getOutputVoltage() / rightLead.getBusVoltage();
		/* prepare line to print */
		_sb.append("\tout:");
		_sb.append(motorOutput);
		_sb.append("\tspd:");
		_sb.append(rightLead.getSpeed());

		if (Robot.oi.driverController.getRawButton(1)) {
			/* Speed mode */

			double targetSpeed = Robot.oi.driverController.getRawAxis(1)//was 468
										 * 413;

			//double targetSpeed = 413;// Robot.oi.driverController.getRawAxis(1)//was
										// 468
										// * 1015;

			rightLead.changeControlMode(TalonControlMode.Speed);
			 rightLead.setProfile(0); // 0 = high gear, 1 = low gear
			rightLead.set(targetSpeed);
			// _sb.append(_talon.getControlMode() );

			// System.out.println(_talonFollower.getControlMode() );
			/* append more signals to print when in speed mode. */
			_sb.append("\terr:");
			_sb.append(rightLead.getClosedLoopError());
			_sb.append("\ttrg:");
			_sb.append(targetSpeed);
		} else if (Robot.oi.driverController.getRawButton(2)) {
			rightLead.set(-.6);
			// System.out.println(_talon.getControlMode() );
			// System.out.println(_talonFollower.getControlMode() );
			// System.out.println("constant voltage mode");
		}

		else {
			/* Percent voltage mode */
			// System.out.println(_talon.getControlMode() );
			// System.out.println(_talonFollower.getControlMode() );
			rightLead.changeControlMode(TalonControlMode.PercentVbus);
			rightLead.set(leftYstick);
			// System.out.println("joystick vbus mode");
		}

		if (++_loops >= 10) {
			_loops = 0;
			System.out.println(_sb.toString());
		}
		_sb.setLength(0);
	}

	
	
	//public void leftDrivetrainPIDTestMode() {
		// SmartDashboard.putInt("motorspeed", leftDriveLead.getEncVelocity());

		/* get gamepad axis */
		//double leftYstick = Robot.oi.driverController.getRawAxis(1);
		//double motorOutput = leftLead.getOutputVoltage() / leftLead.getBusVoltage();
		/* prepare line to print */
		//_sb.append("\tout:");
		//_sb.append(motorOutput);
		//_sb.append("\tspd:");
		//_sb.append(leftLead.getSpeed());

		//if (Robot.oi.driverController.getRawButton(1)) {
			/* Speed mode */

			//double targetSpeed =   413;//Robot.oi.driverController.getRawAxis(1)
				//	* 1015; /* ____ RPM in either direction */
			//leftLead.changeControlMode(TalonControlMode.Speed);
			//leftLead.setProfile(1); // 0 = high gear, 1 = low gear
			//leftLead.set(targetSpeed); /* 1500 RPM in either direction */

			//double targetSpeed = 413; /* ____ RPM in either direction */
			//leftLead.changeControlMode(TalonControlMode.Speed);
			//leftLead.setProfile(0); // 0 = high gear, 1 = low gear
		//	leftLead.set(targetSpeed); /* 1500 RPM in either direction */
			// _sb.append(_talon.getControlMode() );

			// System.out.println(_talonFollower.getControlMode() );
			/* append more signals to print when in speed mode. */
			//_sb.append("\terr:");
			//_sb.append(leftLead.getClosedLoopError());
			//_sb.append("\ttrg:");
			//_sb.append(targetSpeed);
		//}
		/*
		 * else if (Robot.oi.driverController.getRawButton(2)){
		 * leftDriveLead.set(-.6); //System.out.println(_talon.getControlMode()
		 * ); //System.out.println(_talonFollower.getControlMode() );
		 * //System.out.println("constant voltage mode"); }
		 */

		//else {
			/* Percent voltage mode */
			// System.out.println(_talon.getControlMode() );
			// System.out.println(_talonFollower.getControlMode() );
			//leftLead.changeControlMode(TalonControlMode.PercentVbus);
			//leftLead.set(leftYstick);
			// System.out.println("joystick vbus mode");
		//}

		/*if (++_loops >= 10) {
			_loops = 0;
			System.out.println(_sb.toString());
		}
		_sb.setLength(0);
	}
	
	public void combatMotorBias(double moveValue){
		if(moveValue > 0.5) {
			leftLead.configPeakOutputVoltage(+12.0, -12.0);
			rightLead.configPeakOutputVoltage(+10.0, -10.0);
		}
		else if(moveValue < -0.5){
			rightLead.configPeakOutputVoltage(+12.0, -12.0);
			leftLead.configPeakOutputVoltage(+10.0, -10.0);
		}
		
		
	}  */
	
	  public void leftDrivetrainPIDTestMode() {
	    	//SmartDashboard.putInt("motorspeed", leftLead.getEncVelocity());
	    	////**********************
	    	/* get gamepad axis */
	    	double leftYstick = Robot.oi.driverController.getRawAxis(1);
	    	double motorOutput = leftLead.getOutputVoltage() / leftLead.getBusVoltage();
	    	/* prepare line to print */
			_sb.append("\tout:");
			_sb.append(motorOutput);
	        _sb.append("\tspd:");
	        _sb.append(leftLead.getSpeed() );
	        
	        if(Robot.oi.driverController.getRawButton(1)){
	        	/* Speed mode */
	        	double targetSpeed = -2500; /* 1500 RPM in either direction */
	        	leftLead.changeControlMode(TalonControlMode.Speed);
	        	leftLead.set(targetSpeed); /* 1500 RPM in either direction */
	        	//_sb.append(_talon.getControlMode() );
	        	
	        	//System.out.println(_talonFollower.getControlMode() );
	        	/* append more signals to print when in speed mode. */
	            _sb.append("\terr:");
	            _sb.append(leftLead.getClosedLoopError());
	            _sb.append("\ttrg:");
	            _sb.append(targetSpeed);
	        } 
	        else if (Robot.oi.driverController.getRawButton(2)){
	        	leftLead.set(-.6);
	        	//System.out.println(_talon.getControlMode() );
	        	//System.out.println(_talonFollower.getControlMode() );
	        	//System.out.println("constant voltage mode");
	        }
	        
	        else {
	        	/* Percent voltage mode */
	        	//System.out.println(_talon.getControlMode() );
	        	//System.out.println(_talonFollower.getControlMode() );
	        	leftLead.changeControlMode(TalonControlMode.PercentVbus);
	        	leftLead.set(leftYstick);
	        	//System.out.println("joystick vbus mode");
	        }

	        if(++_loops >= 10) {
	        	_loops = 0;
	        	System.out.println(_sb.toString());
	        }
	        _sb.setLength(0);
	    }
	
}
